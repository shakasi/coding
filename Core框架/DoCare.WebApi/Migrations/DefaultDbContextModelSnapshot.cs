// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VNext.Entity;

namespace DoCare.WebApi.Migrations
{
    [DbContext(typeof(DefaultDbContext))]
    partial class DefaultDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10");

            modelBuilder.Entity("DoCare.Hosting.Entities.ExamReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClinDiag")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Device")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("ExamClass")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ExamEndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExamMode")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("ExamNo")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("ExamPara")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ExamStartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExamSubClass")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("Notice")
                        .HasColumnType("TEXT")
                        .HasMaxLength(60);

                    b.Property<string>("PatientId")
                        .HasColumnType("TEXT")
                        .HasMaxLength(60);

                    b.Property<string>("PerformedBy")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("Recommendation")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReportDateTime")
                        .HasColumnType("TEXT")
                        .HasMaxLength(60);

                    b.Property<string>("Reporter")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ReqDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReqDept")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("ReqMemo")
                        .HasColumnType("TEXT")
                        .HasMaxLength(1000);

                    b.Property<string>("ReqPhysician")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("Technician")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("VerifiedBy")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("VerifiedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("VisitId")
                        .HasColumnType("TEXT")
                        .HasMaxLength(60);

                    b.Property<string>("resultStatus")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("PatientId", "VisitId")
                        .HasName("examreport_index");

                    b.ToTable("MED_EXAM_REPORT");
                });

            modelBuilder.Entity("DoCare.Hosting.Entities.LabReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AbnormalIndicator")
                        .HasColumnType("TEXT")
                        .HasMaxLength(60);

                    b.Property<DateTime?>("ApplyTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemNo")
                        .HasColumnType("TEXT")
                        .HasMaxLength(60);

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(60);

                    b.Property<string>("OrderingDept")
                        .HasColumnType("TEXT")
                        .HasMaxLength(60);

                    b.Property<string>("OrderingProvider")
                        .HasColumnType("TEXT")
                        .HasMaxLength(60);

                    b.Property<string>("PatientId")
                        .HasColumnType("TEXT")
                        .HasMaxLength(60);

                    b.Property<string>("PerformedBy")
                        .HasColumnType("TEXT")
                        .HasMaxLength(60);

                    b.Property<string>("PriorityIndicator")
                        .HasColumnType("TEXT")
                        .HasMaxLength(60);

                    b.Property<string>("ReferenceResult")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<string>("RelevantClinicDiag")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReportItemCode")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("ReportItemName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("Result")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ResultDateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ResultRptDateTime")
                        .HasColumnType("TEXT")
                        .HasMaxLength(60);

                    b.Property<string>("ResultStatus")
                        .HasColumnType("TEXT")
                        .HasMaxLength(60);

                    b.Property<DateTime?>("SpcmReceivedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Specimen")
                        .HasColumnType("TEXT");

                    b.Property<string>("TestCause")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<string>("TestNo")
                        .HasColumnType("TEXT")
                        .HasMaxLength(60);

                    b.Property<string>("Transcriptionist")
                        .HasColumnType("TEXT")
                        .HasMaxLength(60);

                    b.Property<string>("Units")
                        .HasColumnType("TEXT")
                        .HasMaxLength(40);

                    b.Property<string>("VerifiedBy")
                        .HasColumnType("TEXT")
                        .HasMaxLength(60);

                    b.Property<string>("VisitId")
                        .HasColumnType("TEXT")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.HasIndex("TestNo", "ReportItemCode", "ItemNo")
                        .IsUnique()
                        .HasName("labreport_index");

                    b.ToTable("MED_LAB_REPORT");
                });

            modelBuilder.Entity("DoCare.Hosting.Entities.PatientRegist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CardId")
                        .HasColumnType("TEXT")
                        .HasMaxLength(60);

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("TEXT")
                        .HasMaxLength(60);

                    b.Property<string>("DeptCode")
                        .HasColumnType("TEXT")
                        .HasMaxLength(60);

                    b.Property<string>("DiagDesc")
                        .HasColumnType("TEXT")
                        .HasMaxLength(2000);

                    b.Property<string>("IdNo")
                        .HasColumnType("TEXT")
                        .HasMaxLength(60);

                    b.Property<string>("MailingAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(60);

                    b.Property<string>("Nation")
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.Property<string>("PatientId")
                        .HasColumnType("TEXT")
                        .HasMaxLength(60);

                    b.Property<string>("PhoneNumberBusiness")
                        .HasColumnType("TEXT")
                        .HasMaxLength(60);

                    b.Property<string>("PhoneNumberHome")
                        .HasColumnType("TEXT")
                        .HasMaxLength(60);

                    b.Property<DateTime?>("REGIST_TIME")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sex")
                        .HasColumnType("TEXT")
                        .HasMaxLength(60);

                    b.Property<string>("VisitId")
                        .HasColumnType("TEXT")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.HasIndex("CardId")
                        .HasName("cardid_index");

                    b.HasIndex("IdNo")
                        .HasName("idno_index");

                    b.HasIndex("PatientId", "VisitId")
                        .IsUnique()
                        .HasName("patientid_visitid_index");

                    b.ToTable("MED_PATIENT_REGIST");
                });

            modelBuilder.Entity("VNext.Authorization.EntityInfos.EntityInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("AuditEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PropertyJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TypeName")
                        .IsUnique()
                        .HasName("ClassFullNameIndex");

                    b.ToTable("Auth_EntityInfo");
                });

            modelBuilder.Entity("VNext.Authorization.Functions.Function", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .HasColumnType("TEXT");

                    b.Property<string>("Area")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AuditEntityEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AuditOperationEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CacheExpirationSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Controller")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAccessTypeChanged")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAjax")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCacheSliding")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsController")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Area", "Controller", "Action")
                        .IsUnique()
                        .HasName("AreaControllerActionIndex");

                    b.ToTable("Auth_Function");
                });

            modelBuilder.Entity("VNext.Systems.KeyValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueJson")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueType")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Systems_KeyValue");
                });
#pragma warning restore 612, 618
        }
    }
}
